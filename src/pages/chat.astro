---
import Navbar from "../components/navbar.astro";
import Sidebar from "../components/sidebar.astro";
import "../styles/chat.css";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Chat</title>
        <link
            rel="stylesheet"
            href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
        />
    </head>
    <body>
        <header>
            <div class="container-navbar">
                <Navbar />
            </div>
        </header>
        <div class="container">
            <h1>Chat</h1>
            <div class="botones">
                <button id="finishPurchaseButton" class="btn btn-primary"
                    >Finalizar Compra</button
                >
                <button id="cancelReservationButton" class="btn btn-danger"
                    >Cancelar Reserva</button
                >
            </div>
            <div id="chat" class="chat"></div>
            <div class="input">
                <input
                    id="newMessage"
                    type="text"
                    class="form-control"
                    placeholder="Escribe tu mensaje aquí..."
                />
                <button id="sendButton" class="btn btn-success">Enviar</button>
            </div>
        </div>
        <footer>
            <Sidebar />
        </footer>

        <script
            src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
        ></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <script
            src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.1/socket.io.js"
        ></script>
        <script>
            import { io } from "socket.io-client";

            interface Message {
                sender: string;
                recipient: string;
                content: string;
                productId: string;
                timestamp?: string;
            }

            function showAlertAndConfirm(message: string) {
            return new Promise((resolve) => {
                const alertDiv = document.createElement('div');
                alertDiv.classList.add('alert', 'alert-warning', 'mt-3', 'position-fixed', 'start-50', 'translate-middle-x');
                alertDiv.style.top = '50%';
                alertDiv.style.left = '50%';
                alertDiv.style.transform = 'translate(-50%, -50%)';
                alertDiv.style.zIndex = '1050'; 
                alertDiv.innerHTML = `
                    <p>${message}</p>
                    <button id="confirmButton" class="btn btn-danger">Sí</button>
                    <button id="cancelButton" class="btn btn-secondary">No</button>
                `;
                document.body.prepend(alertDiv);

                document.getElementById("confirmButton")?.addEventListener("click", () => {
                    resolve(true);
                    alertDiv.remove();
                });

                document.getElementById("cancelButton")?.addEventListener("click", () => {
                    resolve(false);
                    alertDiv.remove();
                });
            });
        }
            document.addEventListener("DOMContentLoaded", async () => {
                const userId = localStorage.getItem("userId");
                const urlParams = new URLSearchParams(window.location.search);
                const recipientId = urlParams.get("recipientId");
                const productId = urlParams.get("productId");
                const chatType = urlParams.get("chatType");

                if (!userId || !recipientId || !productId || !chatType) {
                    console.error(
                        "Missing userId, recipientId, productId, or chatType",
                    );
                    return;
                }

                let senderId = userId;
                let chatRecipientId = recipientId;

                try {
                    const productResponse = await fetch(
                        `https://backendpop-ku78.onrender.com/products/${productId}`,
                    );
                    const product = await productResponse.json();
                    if (product.userId === userId) {
                        senderId = recipientId;
                        chatRecipientId = userId;
                    }
                } catch (error) {
                    console.error("Error fetching product details:", error);
                    return;
                }

                const finishPurchaseButton = document.getElementById(
                    "finishPurchaseButton",
                );
                if (finishPurchaseButton) {
                    finishPurchaseButton.addEventListener("click", async () => {
                        const confirmed = await showAlertAndConfirm(
                            "¿Estás seguro de finalizar la compra?",
                        );
                        if (confirmed) {
                            try {
                                const productUpdateResponse = await fetch(
                                    `https://backendpop-ku78.onrender.com/products/${productId}`,
                                    {
                                        method: "PUT",
                                        headers: {
                                            "Content-Type": "application/json",
                                        },
                                        body: JSON.stringify({
                                            status: "finalizada",
                                        }),
                                    },
                                );

                                if (productUpdateResponse.ok) {
                                    console.log(
                                        "Estado de producto actualizado a 'finalizada'",
                                    );

                                    const messagesDeleteResponse = await fetch(
                                        `https://backendpop-ku78.onrender.com/messages/${senderId}/${chatRecipientId}?productId=${productId}`,
                                        {
                                            method: "DELETE",
                                        },
                                    );

                                    if (messagesDeleteResponse.ok) {
                                        console.log(
                                            "Mensajes eliminados exitosamente",
                                        );

                                        window.location.href = "/sidebar/buzon";
                                    } else {
                                        throw new Error(
                                            "Error al eliminar los mensajes",
                                        );
                                    }
                                } else {
                                    throw new Error(
                                        "Error al actualizar el estado del producto",
                                    );
                                }
                            } catch (error) {
                                console.error("Error:", error);
                            }
                        }
                    });
                }

                const cancelReservationButton = document.getElementById(
                    "cancelReservationButton",
                );
                if (cancelReservationButton) {
                    cancelReservationButton.addEventListener(
                        "click",
                        async () => {
                            const confirmed = await showAlertAndConfirm(
                                "¿Estás seguro de cancelar la reserva?",
                            );
                            if (confirmed) {
                                try {
                                    const response = await fetch(
                                        `https://backendpop-ku78.onrender.com/products/${productId}`,
                                        {
                                            method: "PUT",
                                            headers: {
                                                "Content-Type":
                                                    "application/json",
                                            },
                                            body: JSON.stringify({
                                                status: "disponible",
                                            }),
                                        },
                                    );

                                    if (response.ok) {
                                        console.log(
                                            "Estado de producto actualizado a 'disponible'",
                                        );

                                        window.location.href = "/";
                                    } else {
                                        throw new Error(
                                            "Error al actualizar el estado del producto",
                                        );
                                    }
                                } catch (error) {
                                    console.error(
                                        "Error al actualizar el estado del producto:",
                                        error,
                                    );
                                }
                            }
                        },
                    );
                }

                function displayMessage(message: Message) {
                    const chatContainer = document.getElementById("chat");
                    const messageDiv = document.createElement("div");
                    messageDiv.classList.add("message");
                    messageDiv.innerHTML = `
                    <p>${message.content}</p>
                    <span>${message.timestamp ? new Date(message.timestamp).toLocaleTimeString() : ""}</span>
                `;
                    if (message.sender === userId) {
                        messageDiv.classList.add("sent");
                    } else {
                        messageDiv.classList.add("received");
                    }
                    chatContainer!.appendChild(messageDiv);
                    chatContainer!.scrollTop = chatContainer!.scrollHeight;
                }

                async function fetchMessages() {
                    try {
                        let apiUrl = `https://backendpop-ku78.onrender.com/messages/${senderId}/${chatRecipientId}?productId=${productId}`;

                        const urlParams = new URLSearchParams(
                            window.location.search,
                        );
                        const userType = urlParams.get("chatType");

                        if (userType === "owner") {
                            senderId = urlParams.get("senderId") || "";
                            chatRecipientId =
                                urlParams.get("recipientId") || "";
                        }

                        const response = await fetch(apiUrl);
                        const messages: Message[] = await response.json();
                        const chatContainer = document.getElementById("chat");
                        chatContainer!.innerHTML = "";
                        messages.forEach((message) => displayMessage(message));
                    } catch (error) {
                        console.error("Error fetching messages:", error);
                    }
                }

                const sendButton = document.getElementById("sendButton");
                if (sendButton) {
                    sendButton.addEventListener("click", async () => {
                        const newMessageInput = document.getElementById(
                            "newMessage",
                        ) as HTMLInputElement;
                        if (newMessageInput) {
                            const newMessage = newMessageInput.value.trim();
                            if (newMessage) {
                                const message: Message = {
                                    sender: userId,
                                    recipient: chatRecipientId,
                                    content: newMessage,
                                    productId: productId,
                                    timestamp: new Date().toISOString(),
                                };

                                try {
                                    const response = await fetch(
                                        "https://backendpop-ku78.onrender.com/messages",
                                        {
                                            method: "POST",
                                            headers: {
                                                "Content-Type":
                                                    "application/json",
                                            },
                                            body: JSON.stringify(message),
                                        },
                                    );

                                    if (response.ok) {
                                        console.log(
                                            "Message sent successfully",
                                        );
                                        displayMessage(message);
                                    } else {
                                        throw new Error(
                                            "Failed to send message",
                                        );
                                    }
                                } catch (error) {
                                    console.error(
                                        "Error sending message:",
                                        error,
                                    );
                                }

                                console.log("Sending message:", message);
                                newMessageInput.value = "";
                                await fetchMessages();
                            }
                        }
                    });
                }

                await fetchMessages();
                setInterval(fetchMessages, 2000);
            });
        </script>
    </body>
</html>
